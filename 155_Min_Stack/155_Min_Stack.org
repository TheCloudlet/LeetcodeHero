#+title: 155 Min Stack

* Thinking
- Vector
  push: insertion sort
  pop: pop back
  top: back
- Heap
- *Two Stacks*

* Key takaways
Core concept: Use two stacks
1. Main stack: keep all elements
2. Min stack: store minimal element so far

#+BEGIN_SRC text
push(3)   → stack: [3], minStack: [3]
push(5)   → stack: [3,5], minStack: [3]
push(2)   → stack: [3,5,2], minStack: [3,2]
push(1)   → stack: [3,5,2,1], minStack: [3,2,1]
getMin()  → returns 1
pop()     → stack: [3,5,2], minStack: [3,2]
getMin()  → returns 2
pop()     → stack: [3,5], minStack: [3]
getMin()  → returns 3
#+END_SRC

* Code

#+BEGIN_SRC c++
class MinStack {
private:
   std::stack<int> stack; // main stack
   std::stack<int> minStack;

public:
    MinStack() {}

    void push(int val) {
        stack.push(val);
        if (minStack.empty() || val <= minStack.top()) {
            minStack.push(val);
        }
    }

    void pop() {
        if (stack.top() == minStack.top()) {
            minStack.pop();
        }
        stack.pop();
    }

    int top() {
        return stack.top();
    }

    int getMin() {
        return minStack.top();
    }
};
#+END_SRC
