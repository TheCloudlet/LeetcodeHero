#+title: 042 Trapping Rain Water

* Thinking
** Two pointers
1. Finding peak, and the last peak. <-- I found it hard to implement
2. DP

* Code
- Time: O(n)
- Space: O(n)

#+BEGIN_SRC cpp
class Solution {
public:
    int trap(vector<int>& height) {
        if (height.empty()) return 0;

        // Arrays to track maximum heights from both directions
        std::vector<int> leftMax(height.size());
        int result = 0;

        // First pass: calculate maximum height to the left of each position
        int currentMax = 0;
        for (int i = 0; i < height.size(); ++i) {
            currentMax = std::max(currentMax, height[i]);
            leftMax[i] = currentMax;
        }

        // Second pass: calculate maximum height to the right and trapped water
        // Water trapped at position i = min(leftMax[i], rightMax[i]) - height[i]
        currentMax = 0; // right max
        for (int i = height.size() - 1; i >= 0; --i) {
            currentMax = std::max(currentMax, height[i]);
            // Calculate trapped water at this position
            result += (std::min(leftMax[i], currentMax) - height[i]);
        }

        return result;
    }
};
#+END_SRC

* Optimal Solution: Two pointers
- Time: O(n)
- Space: O(1)

From both sides

#+BEGIN_SRC cpp
class Solution {
public:
    int trap(vector<int>& height) {
        if (height.empty()) return 0;

        int l = 0, r = height.size() - 1;
        int maxL = 0, maxR = 0, result = 0;

        while (l < r) {
            if (height[l] < height[r]) {
                if (height[l] >= maxL) {
                    maxL = height[l];  // Update max left
                } else {
                    result += maxL - height[l];  // Trap water
                }
                ++l;
            } else {
                if (height[r] >= maxR) {
                    maxR = height[r];  // Update max right
                } else {
                    result += maxR - height[r];  // Trap water
                }
                --r;
            }
        }

        return result;
    }
};
#+END_SRC
