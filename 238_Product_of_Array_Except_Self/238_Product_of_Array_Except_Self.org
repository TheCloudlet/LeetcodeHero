#+title: 238 Product Of Array Except Self

* Thinking
1. Iteration
2. Prefix sum & Suffix sum
3. In-place

* Take away
What pattern in LeetCode might suggest using prefix sum and suffix sum?
- Use Prefix Sum when solving range-based sum problems.
- Use Suffix Sum when solving right-to-left accumulation problems.
- Use Both when balancing left and right subarrays.

* Code
** Prefix sum & Suffix sum
- Time: O(n)
- Space: O(n)

#+BEGIN_SRC cpp
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int prefix[nums.size()], suffix[nums.size()];

        prefix[0] = 1;
        for (int i = 1; i < nums.size(); i++) {
            prefix[i] = prefix[i - 1] * nums[i - 1];
        }
        suffix[nums.size() - 1] = 1;
        for (int i = nums.size() - 2; i >= 0; i--) {
            suffix[i] = suffix[i + 1] * nums[i + 1];
        }
        vector<int> result(nums.size()); // Explicitly declare the type
                                         // don't use auto result = vector<int>(nums.size());
        for (int i = 0; i < nums.size(); i++) {
            result[i] = prefix[i] * suffix[i];
        }
        return result;
    }
};
#+END_SRC

** Inplace
- Time: O(n)
- Space: O(1)

#+BEGIN_SRC cpp
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int> prefix(nums.size());

        int prefix = 1;
        for (int i = 0; i < nums.size(); i++) {
            result[i] = prefix;
            prefix *= nums[i];
        }

        int suffix = 1;
        for (int i = nums.size() - 1; i >= 0; i--) {
            result[i] *= suffix;
            suffix *= nums[i];
        }

        return result;
    }
};
#+END_SRC
